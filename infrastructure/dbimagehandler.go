package infrastructure

import (
	_ "database/sql"
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
	"projectServis/interfaces"
)

const schema = `CREATE TABLE if not exists images (
Id     integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
Widht  integer
Height integer
Link   text NOT NULL,
UNIQUE(image)
)`

const makeunique = `ALTER TABLE images
ADD CONSTRAINT image UNIQUE (image);`

type DbimageConnect struct {
	dbimage *sqlx.DB
}

func NewDbimageConnect(dbimage *sqlx.DB) *DbimageConnect {
	return &DbimageConnect{dbimage: dbimage}
}

func (r DbimageConnect) MakeUniqueImageQuery() error {
	_, err := r.dbimage.Exec(makeunique)
	return err
}

func (r DbimageConnect) HistoryAll() ([]interfaces.ImageDb, error) {

	var images []interfaces.ImageDb
	err := r.dbimage.Select(&images, "select * from images")
	usercaseImages := make([]interfaces.ImageDb, 0, len(images))
	for i := range images {
		usercaseImages = append(usercaseImages, interfaces.ImageDb{Id: images[i].Id, Link: images[i].Link})
	}
	return images, err
}

func (r DbimageConnect) FindImageId(id int) interfaces.ImageDb {

	temp := interfaces.ImageDb{}
	row := r.dbimage.QueryRow("select * from images where id = $1", id)
	_ = row.Scan(&temp.Id, &temp.Width, &temp.Height, &temp.Link)

	return temp
}

type Result struct {
	id, width, height int
	link              string
}

func (r DbimageConnect) ChangeImageId(image interfaces.ImageDb) (interfaces.ImageDb, error) {

	//var result Result

	r.dbimage.Exec("UPDATE images SET link=$1 where id=$2 returning link", image.Link, image.Id)

	//var  err error
	//var width int
	//var height int
	//var link string
	//
	//	_, err = r.dbimage.Exec(`
	//UPDATE images
	//SET link=$1, width=$2, height=$3
	//WHERE id=$2
	//RETURNING link, width, height, id`,image.Link, image.Width, image.Height, image.Id)
	//
	imgUp := interfaces.ImageDb{}
	//imgUp.Width = width
	//
	//row := r.dbimage.QueryRow("select * from images where id = $1 returning width, height, link", image.Id)
	//_ = row.Scan(&imgUp.Id, &image.Width, &image.Height, &imgUp.Link)
	//
	//imgUp.Width = width
	//imgUp.Height = height
	//imgUp.Link = link

	return imgUp, nil
}

func (r DbimageConnect) SaveImage(image interfaces.ImageDb) (interfaces.ImageDb, error) {

	//запись данных обычная
	//_, err := r.dbimage.Exec("INSERT INTO images (width, height, link) VALUES ($1, $2, $3)",
	//	image.Width, image.Height, image.Link)

	//запись данных с получение Id
	var id int
	err := r.dbimage.QueryRow("INSERT INTO images (width, height, link) VALUES ($1, $2, $3) returning id",
		image.Width, image.Height, image.Link).Scan(&id)
	image.Id = id

	return image, err
}
